/**
*
*   A simple Regular Expression Analyzer
*   @version 0.1
*   https://github.com/foo123/regex-analyzer
*
**/(function(){var t=function(t,e){var s,h,a=t.charCodeAt(0),r=e.charCodeAt(0);if(r==a)return[String.fromCharCode(a)];for(h=[],s=a;r>=s;++s)h.push(String.fromCharCode(s));return h},e=function(t,e){this.escapeChar="\\",this.repeatsRegex=/^\{\s*(\d+)\s*,?\s*(\d+)?\s*\}/,this.unicodeRegex=/^u([0-9a-fA-F]{4})/,this.hexRegex=/^x([0-9a-fA-F]{2})/,this.specialChars={".":"MatchAnyChar","|":"MatchEither","?":"MatchZeroOrOne","*":"MatchZeroOrMore","+":"MatchOneOrMore","^":"MatchStart",$:"MatchEnd","{":"StartRepeats","}":"EndRepeats","(":"StartGroup",")":"EndGroup","[":"StartCharGroup","]":"EndCharGroup"},this.specialCharsEscaped={"\\":"EscapeChar","/":"/",0:"NULChar",f:"FormFeed",n:"LineFeed",r:"CarriageReturn",t:"HorizontalTab",v:"VerticalTab",b:"MatchWordBoundary",B:"MatchNonWordBoundary",s:"MatchSpaceChar",S:"MatchNonSpaceChar",w:"MatchWordChar",W:"MatchNonWordChar",d:"MatchDigitChar",D:"MatchNonDigitChar"},t&&this.setRegex(t,e)};e.VERSION="0.1",e.getCharRange=t,e.prototype={constructor:e,VERSION:e.VERSION,regex:null,pos:null,escaped:!1,repeatsRegex:null,unicodeRegex:null,hexRegex:null,escapeChar:null,specialChars:null,specialCharsEscaped:null,flags:null,parts:null,getCharRange:e.getCharRange,setRegex:function(t,e){if(t){this.flags={},e=e||"/";for(var s=t.toString(),h=s.length,a=s.charAt(h-1);e!=a;)this.flags[a]=1,s=s.substr(0,h-1),h=s.length,a=s.charAt(h-1);e==s.charAt(0)&&e==s.charAt(h-1)&&(s=s.substr(1,h-2)),this.regex=s}return this},analyze:function(){var t,e,s,h="",a=[];for(this.escaped=!1,this.pos=0;this.pos<this.regex.length;)t=this.regex.charAt(this.pos++),this.escaped=this.escapeChar==t?!0:!1,this.escaped&&(t=this.regex.charAt(this.pos++)),this.escaped?"u"==t?(h.length&&(a.push({part:h,flags:{},type:"String"}),h=""),s=this.unicodeRegex.exec(this.regex.substr(this.pos-1)),this.pos+=s[0].length-1,a.push({part:s[0],flags:{Char:String.fromCharCode(parseInt(s[1],16)),Code:s[1]},type:"UnicodeChar"})):"x"==t?(h.length&&(a.push({part:h,flags:{},type:"String"}),h=""),s=this.hexRegex.exec(this.regex.substr(this.pos-1)),this.pos+=s[0].length-1,a.push({part:s[0],flags:{Char:String.fromCharCode(parseInt(s[1],16)),Code:s[1]},type:"HexChar"})):this.specialCharsEscaped[t]?(h.length&&(a.push({part:h,flags:{},type:"String"}),h=""),e={},e[this.specialCharsEscaped[t]]=1,a.push({part:t,flags:e,type:"Special"})):h+=t:"["==t?(h.length&&(a.push({part:h,flags:{},type:"String"}),h=""),a.push(this.chargroup())):"("==t?(h.length&&(a.push({part:h,flags:{},type:"String"}),h=""),a.push(this.subgroup())):"{"==t?(h.length&&(a.push({part:h,flags:{},type:"String"}),h=""),s=this.repeatsRegex.exec(this.regex.substr(this.pos-1)),this.pos+=s[0].length-1,a.push({part:s[0],flags:{MatchMinimum:s[1],MatchMaximum:s[2]||"unlimited"},type:"Special"})):this.specialChars[t]?(h.length&&(a.push({part:h,flags:{},type:"String"}),h=""),e={},e[this.specialChars[t]]=1,a.push({part:t,flags:e,type:"Special"})):h+=t;return h.length&&(a.push({part:h,flags:{},type:"String"}),h=""),this.parts=a,this},alternate:function(){},subgroup:function(){var t,e,s,h="",a=[],r={};for("?:"==this.regex.substr(this.pos,2)?(r.NotCaptured=1,this.pos+=2):"?="==this.regex.substr(this.pos,2)?(r.LookAhead=1,this.pos+=2):"?!"==this.regex.substr(this.pos,2)&&(r.NegativeLookAhead=1,this.pos+=2);this.pos<this.regex.length;)if(t=this.regex.charAt(this.pos++),this.escaped=this.escapeChar==t?!0:!1,this.escaped&&(t=this.regex.charAt(this.pos++)),this.escaped)"u"==t?(h.length&&(a.push({part:h,flags:{},type:"String"}),h=""),s=this.unicodeRegex.exec(this.regex.substr(this.pos-1)),this.pos+=s[0].length-1,a.push({part:s[0],flags:{Char:String.fromCharCode(parseInt(s[1],16)),Code:s[1]},type:"UnicodeChar"})):"x"==t?(h.length&&(a.push({part:h,flags:{},type:"String"}),h=""),s=this.hexRegex.exec(this.regex.substr(this.pos-1)),this.pos+=s[0].length-1,a.push({part:s[0],flags:{Char:String.fromCharCode(parseInt(s[1],16)),Code:s[1]},type:"HexChar"})):this.specialCharsEscaped[t]?(h.length&&(a.push({part:h,flags:{},type:"String"}),h=""),e={},e[this.specialCharsEscaped[t]]=1,a.push({part:t,flags:e,type:"Special"})):h+=t;else{if(")"==t)return h.length&&(a.push({part:h,flags:{},type:"String"}),h=""),{part:a,flags:r,type:"Group"};"["==t?(h.length&&(a.push({part:h,flags:{},type:"String"}),h=""),a.push(this.chargroup())):"("==t?(h.length&&(a.push({part:h,flags:{},type:"String"}),h=""),a.push(this.subgroup())):"{"==t?(h.length&&(a.push({part:h,flags:{},type:"String"}),h=""),s=this.repeatsRegex.exec(this.regex.substr(this.pos-1)),this.pos+=s[0].length-1,a.push({part:s[0],flags:{MatchMinimum:s[1],MatchMaximum:s[2]||"unlimited"},type:"Special"})):this.specialChars[t]?(h.length&&(a.push({part:h,flags:{},type:"String"}),h=""),e={},e[this.specialChars[t]]=1,a.push({part:t,flags:e,type:"Special"})):h+=t}return{part:h,flags:r,type:"Group"}},chargroup:function(){var t,e,s,h,a,r,p=[],i=[],g={},n=!1;for("^"==this.regex.charAt(this.pos)&&(g.NotMatch=1,this.pos++);this.pos<this.regex.length;)if(r=!1,s=e,e=this.regex.charAt(this.pos++),this.escaped=this.escapeChar==e?!0:!1,this.escaped&&(e=this.regex.charAt(this.pos++)),this.escaped&&("u"==e?(a=this.unicodeRegex.exec(this.regex.substr(this.pos-1)),this.pos+=a[0].length-1,e=String.fromCharCode(parseInt(a[1],16)),r=!0):"x"==e&&(a=this.hexRegex.exec(this.regex.substr(this.pos-1)),this.pos+=a[0].length-1,e=String.fromCharCode(parseInt(a[1],16)),r=!0)),n)i.length&&(p.push({part:i,flags:{},type:"Chars"}),i=[]),h[1]=e,n=!1,p.push({part:h,flags:{},type:"CharRange"});else if(this.escaped)!r&&this.specialCharsEscaped[e]?(i.length&&(p.push({part:i,flags:{},type:"Chars"}),i=[]),t={},t[this.specialCharsEscaped[e]]=1,p.push({part:e,flags:t,type:"Special"})):i.push(e);else{if("]"==e)return i.length&&(p.push({part:i,flags:{},type:"Chars"}),i=[]),{part:p,flags:g,type:"CharGroup"};"-"==e?(h=[s,""],i.pop(),n=!0):i.push(e)}return i.length&&(p.push({part:i,flags:{},type:"Chars"}),i=[]),{part:i,flags:g,type:"CharGroup"}}},"undefined"!=typeof module&&module.exports?module.exports=e:"undefined"!=typeof exports?exports=e:this.RegExAnalyzer=e}).call(this);