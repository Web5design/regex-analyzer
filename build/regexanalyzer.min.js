/**
*
*   A simple Regular Expression Analyzer
*   @version 0.1
*   https://github.com/foo123/regex-analyzer
*
**/(function(){var t=function(t,e){var r,s,p=t.charCodeAt(0),a=e.charCodeAt(0);if(a==p)return[String.fromCharCode(p)];for(s=[],r=p;a>=r;++r)s.push(String.fromCharCode(r));return s},e="\\",r=/^\{\s*(\d+)\s*,?\s*(\d+)?\s*\}/,s=/^u([0-9a-fA-F]{4})/,p=/^x([0-9a-fA-F]{2})/,a={".":"MatchAnyChar","|":"MatchEither","?":"MatchZeroOrOne","*":"MatchZeroOrMore","+":"MatchOneOrMore","^":"MatchStart",$:"MatchEnd","{":"StartRepeats","}":"EndRepeats","(":"StartGroup",")":"EndGroup","[":"StartCharGroup","]":"EndCharGroup"},h={"\\":"EscapeChar","/":"/",0:"NULChar",f:"FormFeed",n:"LineFeed",r:"CarriageReturn",t:"HorizontalTab",v:"VerticalTab",b:"MatchWordBoundary",B:"MatchNonWordBoundary",s:"MatchSpaceChar",S:"MatchNonSpaceChar",w:"MatchWordChar",W:"MatchNonWordChar",d:"MatchDigitChar",D:"MatchNonDigitChar"},g=function(t,e){t&&this.setRegex(t,e)};g.VERSION="0.1",g.getCharRange=t,g.prototype={constructor:g,VERSION:g.VERSION,regex:null,groupIndex:null,pos:null,flags:null,parts:null,getCharRange:g.getCharRange,setRegex:function(t,e){if(t){this.flags={},e=e||"/";for(var r=t.toString(),s=r.length,p=r.charAt(s-1);e!=p;)this.flags[p]=1,r=r.substr(0,s-1),s=r.length,p=r.charAt(s-1);e==r.charAt(0)&&e==r.charAt(s-1)&&(r=r.substr(1,s-2)),this.regex=r}return this},analyze:function(){var t,g,i,n="",u=[],o=[],l=!1;for(this.pos=0,this.groupIndex=0;this.pos<this.regex.length;)t=this.regex.charAt(this.pos++),l=e==t?!0:!1,l&&(t=this.regex.charAt(this.pos++)),l?"u"==t?(n.length&&(o.push({part:n,flags:{},type:"String"}),n=""),i=s.exec(this.regex.substr(this.pos-1)),this.pos+=i[0].length-1,o.push({part:i[0],flags:{Char:String.fromCharCode(parseInt(i[1],16)),Code:i[1]},type:"UnicodeChar"})):"x"==t?(n.length&&(o.push({part:n,flags:{},type:"String"}),n=""),i=p.exec(this.regex.substr(this.pos-1)),this.pos+=i[0].length-1,o.push({part:i[0],flags:{Char:String.fromCharCode(parseInt(i[1],16)),Code:i[1]},type:"HexChar"})):h[t]?(n.length&&(o.push({part:n,flags:{},type:"String"}),n=""),g={},g[h[t]]=1,o.push({part:t,flags:g,type:"Special"})):n+=t:"|"==t?(n.length&&(o.push({part:n,flags:{},type:"String"}),n=""),u.push({part:o,flags:g,type:"Sequence"}),o=[]):"["==t?(n.length&&(o.push({part:n,flags:{},type:"String"}),n=""),o.push(this.chargroup())):"("==t?(n.length&&(o.push({part:n,flags:{},type:"String"}),n=""),o.push(this.subgroup())):"{"==t?(n.length&&(o.push({part:n,flags:{},type:"String"}),n=""),i=r.exec(this.regex.substr(this.pos-1)),this.pos+=i[0].length-1,o.push({part:o.pop(),flags:{part:i[0],MatchMinimum:i[1],MatchMaximum:i[2]||"unlimited"},type:"Quantifier"})):"*"==t||"+"==t?(n.length&&(o.push({part:n,flags:{},type:"String"}),n=""),g={},g[a[t]]=1,"?"==this.regex.charAt(this.pos)?(g.isGreedy=0,this.pos++):g.isGreedy=1,o.push({part:o.pop(),flags:g,type:"Quantifier"})):"?"==t?(n.length&&(o.push({part:n,flags:{},type:"String"}),n=""),g={},g[a[t]]=1,o.push({part:o.pop(),flags:g,type:"Quantifier"})):a[t]?(n.length&&(o.push({part:n,flags:{},type:"String"}),n=""),g={},g[a[t]]=1,o.push({part:t,flags:g,type:"Special"})):n+=t;return n.length&&(o.push({part:n,flags:{},type:"String"}),n=""),u.push({part:o,flags:{},type:"Sequence"}),o=[],g={},g[a["|"]]=1,this.parts={part:u,flags:g,type:"Alternation"},this},subgroup:function(){var t,g,i,n="",u=[],o=[],l={},f=!1,c=this.regex.substr(this.pos,2);for("?:"==c?(l.NotCaptured=1,this.pos+=2):"?="==c?(l.LookAhead=1,this.pos+=2):"?!"==c&&(l.NegativeLookAhead=1,this.pos+=2),l.GroupIndex=++this.groupIndex;this.pos<this.regex.length;)if(t=this.regex.charAt(this.pos++),f=e==t?!0:!1,f&&(t=this.regex.charAt(this.pos++)),f)"u"==t?(n.length&&(o.push({part:n,flags:{},type:"String"}),n=""),i=s.exec(this.regex.substr(this.pos-1)),this.pos+=i[0].length-1,o.push({part:i[0],flags:{Char:String.fromCharCode(parseInt(i[1],16)),Code:i[1]},type:"UnicodeChar"})):"x"==t?(n.length&&(o.push({part:n,flags:{},type:"String"}),n=""),i=p.exec(this.regex.substr(this.pos-1)),this.pos+=i[0].length-1,o.push({part:i[0],flags:{Char:String.fromCharCode(parseInt(i[1],16)),Code:i[1]},type:"HexChar"})):h[t]?(n.length&&(o.push({part:n,flags:{},type:"String"}),n=""),g={},g[h[t]]=1,o.push({part:t,flags:g,type:"Special"})):n+=t;else{if(")"==t)return n.length&&(o.push({part:n,flags:{},type:"String"}),n=""),u.length?(u.push({part:o,flags:{},type:"Sequence"}),o=[],g={},g[a["|"]]=1,{part:{part:u,flags:g,type:"Alternation"},flags:l,type:"Group"}):{part:{part:o,flags:{},type:"Sequence"},flags:l,type:"Group"};"|"==t?(n.length&&(o.push({part:n,flags:{},type:"String"}),n=""),u.push({part:o,flags:g,type:"Sequence"}),o=[]):"["==t?(n.length&&(o.push({part:n,flags:{},type:"String"}),n=""),o.push(this.chargroup())):"("==t?(n.length&&(o.push({part:n,flags:{},type:"String"}),n=""),o.push(this.subgroup())):"{"==t?(n.length&&(o.push({part:n,flags:{},type:"String"}),n=""),i=r.exec(this.regex.substr(this.pos-1)),this.pos+=i[0].length-1,o.push({part:o.pop(),flags:{part:i[0],MatchMinimum:i[1],MatchMaximum:i[2]||"unlimited"},type:"Quantifier"})):"*"==t||"+"==t?(n.length&&(o.push({part:n,flags:{},type:"String"}),n=""),g={},g[a[t]]=1,"?"==this.regex.charAt(this.pos)?(g.isGreedy=0,this.pos++):g.isGreedy=1,o.push({part:o.pop(),flags:g,type:"Quantifier"})):"?"==t?(n.length&&(o.push({part:n,flags:{},type:"String"}),n=""),g={},g[a[t]]=1,o.push({part:o.pop(),flags:g,type:"Quantifier"})):a[t]?(n.length&&(o.push({part:n,flags:{},type:"String"}),n=""),g={},g[a[t]]=1,o.push({part:t,flags:g,type:"Special"})):n+=t}return n.length&&(o.push({part:n,flags:{},type:"String"}),n=""),u.push({part:o,flags:{},type:"Sequence"}),o=[],g={},g[a["|"]]=1,{part:{part:u,flags:g,type:"Alternation"},flags:l,type:"Group"}},chargroup:function(){var t,r,a,g,i,n,u=[],o=[],l={},f=!1,c=!1;for("^"==this.regex.charAt(this.pos)&&(l.NotMatch=1,this.pos++);this.pos<this.regex.length;)if(n=!1,a=r,r=this.regex.charAt(this.pos++),c=e==r?!0:!1,c&&(r=this.regex.charAt(this.pos++)),c&&("u"==r?(i=s.exec(this.regex.substr(this.pos-1)),this.pos+=i[0].length-1,r=String.fromCharCode(parseInt(i[1],16)),n=!0):"x"==r&&(i=p.exec(this.regex.substr(this.pos-1)),this.pos+=i[0].length-1,r=String.fromCharCode(parseInt(i[1],16)),n=!0)),f)o.length&&(u.push({part:o,flags:{},type:"Chars"}),o=[]),g[1]=r,f=!1,u.push({part:g,flags:{},type:"CharRange"});else if(c)!n&&h[r]?(o.length&&(u.push({part:o,flags:{},type:"Chars"}),o=[]),t={},t[h[r]]=1,u.push({part:r,flags:t,type:"Special"})):o.push(r);else{if("]"==r)return o.length&&(u.push({part:o,flags:{},type:"Chars"}),o=[]),{part:u,flags:l,type:"CharGroup"};"-"==r?(g=[a,""],o.pop(),f=!0):o.push(r)}return o.length&&(u.push({part:o,flags:{},type:"Chars"}),o=[]),u}},"undefined"!=typeof module&&module.exports?module.exports=g:"undefined"!=typeof exports?exports=g:this.RegExAnalyzer=g}).call(this);